# name of the entire workflow
name: Shell Commands

# Events (with the keyword on) that will trigger this workflow
# We can define an event or an array of events
on: [push]

#  Define jobs with the jobs keyword
# This is an object with the keys being the name of the job
# Each job will run in a virtual machine
jobs:
  run-shell-commands:
        # This values will be an object with some options for our job
        # We can define the operation system through the runs-on argument
        runs-on: ubuntu-latest
        # We can define steps what will be an array of objects, each one represents a step
        steps:
          # Each step can represent an action or run some shell command
          - name: echo a string
          # To run a shell command we use the keyword run as a key and the name of the shell command as a value
          # This command of couse need to match the virtual machine shell, for example echo can be use in the ubuntu VM
            run: echo "Hello World"
          - name: multiline script
            # We can use the pipe to specify multiple commands 
            run: |
              node -v
              npm -v
          
          - name: python command
            run: |
              import platform
              print(platform.processor())
            shell: python
  run-windows-commands:
    runs-on: windows-latest
    # jobs can be execute in parallel (by default) or in series (by using the key needs and a list of jobs that the particular job depends on)
    needs: ["run-shell-commands"]
    steps:
      - name: Directory Powershell
        run: Get-Location
        # Do no need to specify the shell since it will take its default according to the os specify above
      - name: Directory Bash
        run: pwd
        shell: bash